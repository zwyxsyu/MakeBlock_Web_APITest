{
  "reportTitle": "MakeBlock_Web_APITest",
  "stats": {
    "suites": 16,
    "tests": 63,
    "passes": 62,
    "pending": 0,
    "failures": 1,
    "start": "2016-07-02T07:46:46.582Z",
    "end": "2016-07-02T07:46:48.352Z",
    "duration": 1770,
    "testsRegistered": 63,
    "passPercent": 98.4,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "request(url)",
        "suites": [
          {
            "title": ".end(cb)",
            "suites": [],
            "tests": [
              {
                "title": "should set `this` to the test object when calling cb",
                "fullTitle": "request(url) .end(cb) should set `this` to the test object when calling cb",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  <span class=\"hljs-keyword\">var</span> test = request(url).get(<span class=\"hljs-string\">'/'</span>);<br>  test.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>    done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "e3bcb1ed-c33d-4416-9848-9816f5ce66ed",
                "parentUUID": "11390035-8e9d-4239-bc0f-ec26ad62c4d3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "11390035-8e9d-4239-bc0f-ec26ad62c4d3",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should set `this` to the test object when calling cb",
                "fullTitle": "request(url) .end(cb) should set `this` to the test object when calling cb",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  <span class=\"hljs-keyword\">var</span> test = request(url).get(<span class=\"hljs-string\">'/'</span>);<br>  test.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>    done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "e3bcb1ed-c33d-4416-9848-9816f5ce66ed",
                "parentUUID": "11390035-8e9d-4239-bc0f-ec26ad62c4d3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 16
          }
        ],
        "tests": [
          {
            "title": "should be supported",
            "fullTitle": "request(url) should be supported",
            "timedOut": false,
            "duration": 139,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>, done);<br>});",
            "isRoot": false,
            "uuid": "50f8b072-892d-4970-9902-d211faea2dd7",
            "parentUUID": "7db6554f-2430-423c-8d15-5ab96381654d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\module\\supertest.js",
        "uuid": "7db6554f-2430-423c-8d15-5ab96381654d",
        "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
        "passes": [
          {
            "title": "should be supported",
            "fullTitle": "request(url) should be supported",
            "timedOut": false,
            "duration": 139,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>, done);<br>});",
            "isRoot": false,
            "uuid": "50f8b072-892d-4970-9902-d211faea2dd7",
            "parentUUID": "7db6554f-2430-423c-8d15-5ab96381654d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 139
      },
      {
        "title": "request(app)",
        "suites": [
          {
            "title": ".end(fn)",
            "suites": [],
            "tests": [
              {
                "title": "should close server",
                "fullTitle": "request(app) .end(fn) should close server",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  done();<br>});",
                "isRoot": false,
                "uuid": "65143f3a-27c7-47cf-98a8-e6ef33c2ea9e",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should wait for server to close before invoking fn",
                "fullTitle": "request(app) .end(fn) should wait for server to close before invoking fn",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> closed = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed.should.be.true;<br>  done();<br>});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed = <span class=\"hljs-literal\">true</span>;<br>});",
                "isRoot": false,
                "uuid": "ca3db484-a04a-4762-8c77-e30431164122",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should support nested requests",
                "fullTitle": "request(app) .end(fn) should support nested requests",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test = request(app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  test<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>    done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "28bbf5f1-ad95-4c3a-b61e-276c03ab5a7f",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should include the response in the error callback",
                "fullTitle": "request(app) .end(fn) should include the response in the error callback",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  should.exist(res);<br>  <span class=\"hljs-comment\">// Duck-typing response, just in case.</span><br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "7ff59228-64e2-4117-ab00-f6f20b4a0580",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should set `this` to the test object when calling the error callback",
                "fullTitle": "request(app) .end(fn) should set `this` to the test object when calling the error callback",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>test = request(app).get(<span class=\"hljs-string\">'/'</span>);<br>test.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>}).end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "4231200c-8cff-450e-9d48-ee25f3c45661",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should handle an undefined Response",
                "fullTitle": "request(app) .end(fn) should handle an undefined Response",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    res.end();<br>  }, <span class=\"hljs-number\">20</span>);<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .timeout(<span class=\"hljs-number\">1</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "a7fff0b3-e9d6-4f5e-bde1-ebd5857f592d",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should handle error returned when server goes down",
                "fullTitle": "request(app) .end(fn) should handle error returned when server goes down",
                "timedOut": false,
                "duration": 1016,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end();<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  server.close();<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "4ec4390b-8a8b-4ff1-bcd6-eb7bc8160311",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "788c73a2-e486-4818-9434-96bd15f55a66",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should close server",
                "fullTitle": "request(app) .end(fn) should close server",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  done();<br>});",
                "isRoot": false,
                "uuid": "65143f3a-27c7-47cf-98a8-e6ef33c2ea9e",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should wait for server to close before invoking fn",
                "fullTitle": "request(app) .end(fn) should wait for server to close before invoking fn",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> closed = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed.should.be.true;<br>  done();<br>});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed = <span class=\"hljs-literal\">true</span>;<br>});",
                "isRoot": false,
                "uuid": "ca3db484-a04a-4762-8c77-e30431164122",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should support nested requests",
                "fullTitle": "request(app) .end(fn) should support nested requests",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test = request(app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  test<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>    done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "28bbf5f1-ad95-4c3a-b61e-276c03ab5a7f",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should include the response in the error callback",
                "fullTitle": "request(app) .end(fn) should include the response in the error callback",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  should.exist(res);<br>  <span class=\"hljs-comment\">// Duck-typing response, just in case.</span><br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "7ff59228-64e2-4117-ab00-f6f20b4a0580",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should set `this` to the test object when calling the error callback",
                "fullTitle": "request(app) .end(fn) should set `this` to the test object when calling the error callback",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>test = request(app).get(<span class=\"hljs-string\">'/'</span>);<br>test.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>}).end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "4231200c-8cff-450e-9d48-ee25f3c45661",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should handle an undefined Response",
                "fullTitle": "request(app) .end(fn) should handle an undefined Response",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    res.end();<br>  }, <span class=\"hljs-number\">20</span>);<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .timeout(<span class=\"hljs-number\">1</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "a7fff0b3-e9d6-4f5e-bde1-ebd5857f592d",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              },
              {
                "title": "should handle error returned when server goes down",
                "fullTitle": "request(app) .end(fn) should handle error returned when server goes down",
                "timedOut": false,
                "duration": 1016,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end();<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  server.close();<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
                "isRoot": false,
                "uuid": "4ec4390b-8a8b-4ff1-bcd6-eb7bc8160311",
                "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1054
          },
          {
            "title": ".expect(status[, fn])",
            "suites": [],
            "tests": [
              {
                "title": "should assert the response status",
                "fullTitle": "request(app) .expect(status[, fn]) should assert the response status",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">404</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 404 \"Not Found\", got 200 \"OK\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "e8ced2da-99cb-47f5-b1fe-96cb89809b72",
                "parentUUID": "4de7244e-6bc9-45a7-b650-7758c6bba8cb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "4de7244e-6bc9-45a7-b650-7758c6bba8cb",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should assert the response status",
                "fullTitle": "request(app) .expect(status[, fn]) should assert the response status",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">404</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 404 \"Not Found\", got 200 \"OK\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "e8ced2da-99cb-47f5-b1fe-96cb89809b72",
                "parentUUID": "4de7244e-6bc9-45a7-b650-7758c6bba8cb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 16
          },
          {
            "title": ".expect(status)",
            "suites": [],
            "tests": [
              {
                "title": "should assert only status",
                "fullTitle": "request(app) .expect(status) should assert only status",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.end(done);",
                "isRoot": false,
                "uuid": "3710137d-4b55-4385-addc-5012b3f2cdc3",
                "parentUUID": "855f575c-537c-4fc3-a3e5-eaa7d5eb204d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "855f575c-537c-4fc3-a3e5-eaa7d5eb204d",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should assert only status",
                "fullTitle": "request(app) .expect(status) should assert only status",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.end(done);",
                "isRoot": false,
                "uuid": "3710137d-4b55-4385-addc-5012b3f2cdc3",
                "parentUUID": "855f575c-537c-4fc3-a3e5-eaa7d5eb204d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 12
          },
          {
            "title": ".expect(status, body[, fn])",
            "suites": [
              {
                "title": "when the body argument is an empty string",
                "suites": [],
                "tests": [
                  {
                    "title": "should not quietly pass on failure",
                    "fullTitle": ".expect(status, body[, fn]) when the body argument is an empty string should not quietly pass on failure",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">''</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'\\' response body, got \\'foo\\''</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "434436a6-44b0-467f-81c8-978c672163ad",
                    "parentUUID": "30bb25bc-da15-4f1d-8509-34c81385851c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\test\\module\\supertest.js",
                "uuid": "30bb25bc-da15-4f1d-8509-34c81385851c",
                "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
                "passes": [
                  {
                    "title": "should not quietly pass on failure",
                    "fullTitle": ".expect(status, body[, fn]) when the body argument is an empty string should not quietly pass on failure",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">''</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'\\' response body, got \\'foo\\''</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "434436a6-44b0-467f-81c8-978c672163ad",
                    "parentUUID": "30bb25bc-da15-4f1d-8509-34c81385851c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 8
              }
            ],
            "tests": [
              {
                "title": "should assert the response body and status",
                "fullTitle": "request(app) .expect(status, body[, fn]) should assert the response body and status",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'foo'</span>, done);",
                "isRoot": false,
                "uuid": "c88d5e2b-9c82-496e-8be6-08dc74878d35",
                "parentUUID": "1f870548-e970-430f-af91-bc0685c89a75",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "1f870548-e970-430f-af91-bc0685c89a75",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should assert the response body and status",
                "fullTitle": "request(app) .expect(status, body[, fn]) should assert the response body and status",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'foo'</span>, done);",
                "isRoot": false,
                "uuid": "c88d5e2b-9c82-496e-8be6-08dc74878d35",
                "parentUUID": "1f870548-e970-430f-af91-bc0685c89a75",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 9
          },
          {
            "title": ".expect(body[, fn])",
            "suites": [],
            "tests": [
              {
                "title": "should assert the response body",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the response body",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, got \\'{\"foo\":\"bar\"}\\''</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "3887b081-f823-4555-ba64-0926b5e85762",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert the status before the body",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the status before the body",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).send({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "d5d6cdff-fe71-48c5-a8dc-bcb7c92d83b8",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert the response text",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the response text",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'{\"foo\":\"bar\"}'</span>, done);",
                "isRoot": false,
                "uuid": "1ebb0fec-3e10-488e-8e55-7a934f93849d",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert the parsed response body",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the parsed response body",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect({ foo: <span class=\"hljs-string\">'baz'</span> })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected { foo: \\'baz\\' } response body, got { foo: \\'bar\\' }'</span>);<br>  request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect({ foo: <span class=\"hljs-string\">'bar'</span> })<br>  .end(done);<br>});",
                "isRoot": false,
                "uuid": "6707eb1b-52c7-41c9-953d-0f4a12383cc4",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should support regular expressions",
                "fullTitle": "request(app) .expect(body[, fn]) should support regular expressions",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foobar'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/^bar/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected body \\'foobar\\' to match /^bar/'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "7f67fed1-674e-4e4c-a7d5-a821442addb2",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert response body multiple times",
                "fullTitle": "request(app) .expect(body[, fn]) should assert response body multiple times",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">\"expected 'hey' response body, got 'hey tj'\"</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "5121f594-1304-48e6-8ccb-3ba440bd7ae1",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert response body multiple times with no exception",
                "fullTitle": "request(app) .expect(body[, fn]) should assert response body multiple times with no exception",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-regexp\">/^hey/</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>, done);",
                "isRoot": false,
                "uuid": "5490e545-d151-4db7-a958-e4cfa8ac7e6c",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should assert the response body",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the response body",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, got \\'{\"foo\":\"bar\"}\\''</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "3887b081-f823-4555-ba64-0926b5e85762",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert the status before the body",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the status before the body",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).send({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "d5d6cdff-fe71-48c5-a8dc-bcb7c92d83b8",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert the response text",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the response text",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'{\"foo\":\"bar\"}'</span>, done);",
                "isRoot": false,
                "uuid": "1ebb0fec-3e10-488e-8e55-7a934f93849d",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert the parsed response body",
                "fullTitle": "request(app) .expect(body[, fn]) should assert the parsed response body",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect({ foo: <span class=\"hljs-string\">'baz'</span> })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected { foo: \\'baz\\' } response body, got { foo: \\'bar\\' }'</span>);<br>  request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect({ foo: <span class=\"hljs-string\">'bar'</span> })<br>  .end(done);<br>});",
                "isRoot": false,
                "uuid": "6707eb1b-52c7-41c9-953d-0f4a12383cc4",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should support regular expressions",
                "fullTitle": "request(app) .expect(body[, fn]) should support regular expressions",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foobar'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/^bar/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected body \\'foobar\\' to match /^bar/'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "7f67fed1-674e-4e4c-a7d5-a821442addb2",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert response body multiple times",
                "fullTitle": "request(app) .expect(body[, fn]) should assert response body multiple times",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">\"expected 'hey' response body, got 'hey tj'\"</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "5121f594-1304-48e6-8ccb-3ba440bd7ae1",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              },
              {
                "title": "should assert response body multiple times with no exception",
                "fullTitle": "request(app) .expect(body[, fn]) should assert response body multiple times with no exception",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-regexp\">/^hey/</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>, done);",
                "isRoot": false,
                "uuid": "5490e545-d151-4db7-a958-e4cfa8ac7e6c",
                "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 52
          },
          {
            "title": ".expect(field, value[, fn])",
            "suites": [
              {
                "title": "handling arbitrary expect functions",
                "suites": [],
                "tests": [
                  {
                    "title": "reports errors",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions reports errors",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'failed'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'failed'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "4e321d88-4e41-47fc-8c07-959025253e36",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "ensures truthy non-errors returned from asserts are not promoted to errors",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions ensures truthy non-errors returned from asserts are not promoted to errors",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'some descriptive error'</span>;<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.not.exist(err);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "29d43257-539c-4f31-b872-41558a84fcdd",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "ensures truthy errors returned from asserts are throw to end",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions ensures truthy errors returned from asserts are throw to end",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'some descriptive error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'some descriptive error'</span>);<br>  (err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>).should.be.true;<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "39d916b0-2aa6-4a2b-96e1-59301224c8ac",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "doesn't create false negatives",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions doesn't create false negatives",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.end(done);",
                    "isRoot": false,
                    "uuid": "4eccd9be-7d48-40df-bd59-10f7afa77425",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "handles multiple asserts",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions handles multiple asserts",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> calls = [];<br>get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>; })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> callCount = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">count, i</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> count + calls[i];<br>  }, <span class=\"hljs-number\">0</span>);<br>  callCount.should.equal(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"didn't see all assertions run\"</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "43cb2443-c8e7-46e4-906a-009fc2d97f6b",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "plays well with normal assertions - no false positives",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions plays well with normal assertions - no false positives",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/json/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.match(<span class=\"hljs-regexp\">/Content-Type/</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "e105526b-7ed4-425c-8215-01f7b1905111",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "plays well with normal assertions - no false negatives",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions plays well with normal assertions - no false negatives",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.end(done);",
                    "isRoot": false,
                    "uuid": "2ad0e5a6-47f2-48b1-9160-fd7a1347ca79",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\test\\module\\supertest.js",
                "uuid": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
                "passes": [
                  {
                    "title": "reports errors",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions reports errors",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'failed'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'failed'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "4e321d88-4e41-47fc-8c07-959025253e36",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "ensures truthy non-errors returned from asserts are not promoted to errors",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions ensures truthy non-errors returned from asserts are not promoted to errors",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'some descriptive error'</span>;<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.not.exist(err);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "29d43257-539c-4f31-b872-41558a84fcdd",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "ensures truthy errors returned from asserts are throw to end",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions ensures truthy errors returned from asserts are throw to end",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'some descriptive error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'some descriptive error'</span>);<br>  (err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>).should.be.true;<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "39d916b0-2aa6-4a2b-96e1-59301224c8ac",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "doesn't create false negatives",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions doesn't create false negatives",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.end(done);",
                    "isRoot": false,
                    "uuid": "4eccd9be-7d48-40df-bd59-10f7afa77425",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "handles multiple asserts",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions handles multiple asserts",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> calls = [];<br>get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>; })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> callCount = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">count, i</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> count + calls[i];<br>  }, <span class=\"hljs-number\">0</span>);<br>  callCount.should.equal(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"didn't see all assertions run\"</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "43cb2443-c8e7-46e4-906a-009fc2d97f6b",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "plays well with normal assertions - no false positives",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions plays well with normal assertions - no false positives",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/json/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.match(<span class=\"hljs-regexp\">/Content-Type/</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "e105526b-7ed4-425c-8215-01f7b1905111",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  },
                  {
                    "title": "plays well with normal assertions - no false negatives",
                    "fullTitle": ".expect(field, value[, fn]) handling arbitrary expect functions plays well with normal assertions - no false negatives",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.end(done);",
                    "isRoot": false,
                    "uuid": "2ad0e5a6-47f2-48b1-9160-fd7a1347ca79",
                    "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 24
              },
              {
                "title": "handling multiple assertions per field",
                "suites": [],
                "tests": [
                  {
                    "title": "should work",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should work",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(done);",
                    "isRoot": false,
                    "uuid": "12845dd0-ddbe-433e-83c9-3aeeb23a03a7",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  },
                  {
                    "title": "should return an error if the first one fails",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should return an error if the first one fails",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "4542e61f-7afb-4e21-9559-405bdc951b14",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  },
                  {
                    "title": "should return an error if a middle one fails",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should return an error if a middle one fails",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "a8e1ecdf-24f9-4fbc-b7f4-d495dbe1a219",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  },
                  {
                    "title": "should return an error if the last one fails",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should return an error if the last one fails",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "f8128ed1-c18f-4055-b964-b0174c98d5cc",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\test\\module\\supertest.js",
                "uuid": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
                "passes": [
                  {
                    "title": "should work",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should work",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(done);",
                    "isRoot": false,
                    "uuid": "12845dd0-ddbe-433e-83c9-3aeeb23a03a7",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  },
                  {
                    "title": "should return an error if the first one fails",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should return an error if the first one fails",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "4542e61f-7afb-4e21-9559-405bdc951b14",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  },
                  {
                    "title": "should return an error if a middle one fails",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should return an error if a middle one fails",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "a8e1ecdf-24f9-4fbc-b7f4-d495dbe1a219",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  },
                  {
                    "title": "should return an error if the last one fails",
                    "fullTitle": ".expect(field, value[, fn]) handling multiple assertions per field should return an error if the last one fails",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                    "isRoot": false,
                    "uuid": "f8128ed1-c18f-4055-b964-b0174c98d5cc",
                    "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 26
              }
            ],
            "tests": [
              {
                "title": "should assert the header field presence",
                "fullTitle": "request(app) .expect(field, value[, fn]) should assert the header field presence",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Foo'</span>, <span class=\"hljs-string\">'bar'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Foo\" header field'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "9e2d2bbc-50ce-43c3-8c7a-609cd7d525dd",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should assert the header field value",
                "fullTitle": "request(app) .expect(field, value[, fn]) should assert the header field value",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" of \"text/html\", '</span> +<br>    <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "469ec963-29be-4809-88e2-d8ed6e8569d7",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should assert multiple fields",
                "fullTitle": "request(app) .expect(field, value[, fn]) should assert multiple fields",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html; charset=utf-8'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-string\">'3'</span>)<br>.end(done);",
                "isRoot": false,
                "uuid": "4f4e4407-df19-48ce-8986-a580da078357",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should support regular expressions",
                "fullTitle": "request(app) .expect(field, value[, fn]) should support regular expressions",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/^application/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /^application/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "e16dfc40-d700-4368-9e42-c6a8e7511abf",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should support numbers",
                "fullTitle": "request(app) .expect(field, value[, fn]) should support numbers",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-number\">4</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Length\" of \"4\", got \"3\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "bc6aa858-649c-4419-b229-d23103599a49",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\test\\module\\supertest.js",
            "uuid": "cb590cf0-46f8-4de8-a1a4-735632727ade",
            "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
            "passes": [
              {
                "title": "should assert the header field presence",
                "fullTitle": "request(app) .expect(field, value[, fn]) should assert the header field presence",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Foo'</span>, <span class=\"hljs-string\">'bar'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Foo\" header field'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "9e2d2bbc-50ce-43c3-8c7a-609cd7d525dd",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should assert the header field value",
                "fullTitle": "request(app) .expect(field, value[, fn]) should assert the header field value",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" of \"text/html\", '</span> +<br>    <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "469ec963-29be-4809-88e2-d8ed6e8569d7",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should assert multiple fields",
                "fullTitle": "request(app) .expect(field, value[, fn]) should assert multiple fields",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html; charset=utf-8'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-string\">'3'</span>)<br>.end(done);",
                "isRoot": false,
                "uuid": "4f4e4407-df19-48ce-8986-a580da078357",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should support regular expressions",
                "fullTitle": "request(app) .expect(field, value[, fn]) should support regular expressions",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/^application/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /^application/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "e16dfc40-d700-4368-9e42-c6a8e7511abf",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              },
              {
                "title": "should support numbers",
                "fullTitle": "request(app) .expect(field, value[, fn]) should support numbers",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-number\">4</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Length\" of \"4\", got \"3\"'</span>);<br>  done();<br>});",
                "isRoot": false,
                "uuid": "bc6aa858-649c-4419-b229-d23103599a49",
                "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 29
          }
        ],
        "tests": [
          {
            "title": "should fire up the app on an ephemeral port",
            "fullTitle": "request(app) should fire up the app on an ephemeral port",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "66f9b392-0ff7-4e3c-b7f3-c7b7af3741f1",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with an active server",
            "fullTitle": "request(app) should work with an active server",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>server = app.listen(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(server)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
            "isRoot": false,
            "uuid": "900ba79c-6c95-4834-998f-6d5fc7e11e2b",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with remote server",
            "fullTitle": "request(app) should work with remote server",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>app.listen(<span class=\"hljs-number\">4001</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(<span class=\"hljs-string\">'http://localhost:4001'</span>)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
            "isRoot": false,
            "uuid": "eba364a5-dc91-47d8-9f97-7af056c88850",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with a https server",
            "fullTitle": "request(app) should work with a https server",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> fixtures = path.join(__dirname, <span class=\"hljs-string\">'fixtures'</span>);<br><span class=\"hljs-keyword\">var</span> server = https.createServer({<br>  key: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_key.pem'</span>)),<br>  cert: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_cert.pem'</span>))<br>}, app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(server)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
            "err": {
              "name": "Error",
              "message": "ENOENT: no such file or directory, open 'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'",
              "stack": "<span class=\"hljs-built_in\">Error</span>: ENOENT: no such file or directory, open <span class=\"hljs-string\">'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'</span><br>  at <span class=\"hljs-built_in\">Error</span> (native)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.openSync (fs.js:<span class=\"hljs-number\">549</span>:<span class=\"hljs-number\">18</span>)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.readFileSync (fs.js:<span class=\"hljs-number\">397</span>:<span class=\"hljs-number\">15</span>)<br>  at Context.&lt;anonymous&gt; (E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\<span class=\"hljs-built_in\">module</span>\\supertest.js:<span class=\"hljs-number\">108</span>:<span class=\"hljs-number\">15</span>)<br>  at callFnAsync (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">349</span>:<span class=\"hljs-number\">8</span>)<br>  at Test.Runnable.run (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">7</span>)<br>  at Runner.runTest (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">422</span>:<span class=\"hljs-number\">10</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">528</span>:<span class=\"hljs-number\">12</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">342</span>:<span class=\"hljs-number\">14</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">352</span>:<span class=\"hljs-number\">7</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">284</span>:<span class=\"hljs-number\">14</span>)<br>  at Immediate._onImmediate (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">320</span>:<span class=\"hljs-number\">5</span>)<br>"
            },
            "isRoot": false,
            "uuid": "b71b72c4-eead-43c2-b0b7-07ce7ffc1b99",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with .send() etc",
            "fullTitle": "request(app) should work with .send() etc",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.use(bodyParser.json());<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(req.body.name);<br>});<br>request(app)<br>.post(<span class=\"hljs-string\">'/'</span>)<br>.send({ name: <span class=\"hljs-string\">'tobi'</span> })<br>.expect(<span class=\"hljs-string\">'tobi'</span>, done);",
            "isRoot": false,
            "uuid": "f52c9364-1966-4dc1-8b65-5ba621479320",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work when unbuffered",
            "fullTitle": "request(app) should work when unbuffered",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Hello'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Hello'</span>, done);",
            "isRoot": false,
            "uuid": "faac6694-2dd6-4899-86fb-c7c64ce227cb",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should default redirects to 0",
            "fullTitle": "request(app) should default redirects to 0",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">302</span>, done);",
            "isRoot": false,
            "uuid": "5220dde1-1a13-4168-bd99-86e6cf546ed1",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should handle redirects",
            "fullTitle": "request(app) should handle redirects",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/login'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Login'</span>);<br>});<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.redirects(<span class=\"hljs-number\">1</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(res);<br>  res.status.should.be.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Login'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "5e2c60ce-12d7-4d21-9343-15e8de7fcbd0",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should handle socket errors",
            "fullTitle": "request(app) should handle socket errors",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.destroy();<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.exist(err);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "09b9a531-5b2c-4e40-8096-60e58cc90c98",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\module\\supertest.js",
        "uuid": "44402c40-fc47-42be-8da3-d892a1810e40",
        "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
        "passes": [
          {
            "title": "should fire up the app on an ephemeral port",
            "fullTitle": "request(app) should fire up the app on an ephemeral port",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "66f9b392-0ff7-4e3c-b7f3-c7b7af3741f1",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with an active server",
            "fullTitle": "request(app) should work with an active server",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>server = app.listen(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(server)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
            "isRoot": false,
            "uuid": "900ba79c-6c95-4834-998f-6d5fc7e11e2b",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with remote server",
            "fullTitle": "request(app) should work with remote server",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>app.listen(<span class=\"hljs-number\">4001</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(<span class=\"hljs-string\">'http://localhost:4001'</span>)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
            "isRoot": false,
            "uuid": "eba364a5-dc91-47d8-9f97-7af056c88850",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work with .send() etc",
            "fullTitle": "request(app) should work with .send() etc",
            "timedOut": false,
            "duration": 62,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.use(bodyParser.json());<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(req.body.name);<br>});<br>request(app)<br>.post(<span class=\"hljs-string\">'/'</span>)<br>.send({ name: <span class=\"hljs-string\">'tobi'</span> })<br>.expect(<span class=\"hljs-string\">'tobi'</span>, done);",
            "isRoot": false,
            "uuid": "f52c9364-1966-4dc1-8b65-5ba621479320",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should work when unbuffered",
            "fullTitle": "request(app) should work when unbuffered",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Hello'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Hello'</span>, done);",
            "isRoot": false,
            "uuid": "faac6694-2dd6-4899-86fb-c7c64ce227cb",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should default redirects to 0",
            "fullTitle": "request(app) should default redirects to 0",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">302</span>, done);",
            "isRoot": false,
            "uuid": "5220dde1-1a13-4168-bd99-86e6cf546ed1",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should handle redirects",
            "fullTitle": "request(app) should handle redirects",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/login'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Login'</span>);<br>});<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.redirects(<span class=\"hljs-number\">1</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(res);<br>  res.status.should.be.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Login'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "5e2c60ce-12d7-4d21-9343-15e8de7fcbd0",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          },
          {
            "title": "should handle socket errors",
            "fullTitle": "request(app) should handle socket errors",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.destroy();<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.exist(err);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "09b9a531-5b2c-4e40-8096-60e58cc90c98",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "should work with a https server",
            "fullTitle": "request(app) should work with a https server",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> fixtures = path.join(__dirname, <span class=\"hljs-string\">'fixtures'</span>);<br><span class=\"hljs-keyword\">var</span> server = https.createServer({<br>  key: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_key.pem'</span>)),<br>  cert: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_cert.pem'</span>))<br>}, app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(server)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
            "err": {
              "name": "Error",
              "message": "ENOENT: no such file or directory, open 'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'",
              "stack": "<span class=\"hljs-built_in\">Error</span>: ENOENT: no such file or directory, open <span class=\"hljs-string\">'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'</span><br>  at <span class=\"hljs-built_in\">Error</span> (native)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.openSync (fs.js:<span class=\"hljs-number\">549</span>:<span class=\"hljs-number\">18</span>)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.readFileSync (fs.js:<span class=\"hljs-number\">397</span>:<span class=\"hljs-number\">15</span>)<br>  at Context.&lt;anonymous&gt; (E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\<span class=\"hljs-built_in\">module</span>\\supertest.js:<span class=\"hljs-number\">108</span>:<span class=\"hljs-number\">15</span>)<br>  at callFnAsync (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">349</span>:<span class=\"hljs-number\">8</span>)<br>  at Test.Runnable.run (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">7</span>)<br>  at Runner.runTest (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">422</span>:<span class=\"hljs-number\">10</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">528</span>:<span class=\"hljs-number\">12</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">342</span>:<span class=\"hljs-number\">14</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">352</span>:<span class=\"hljs-number\">7</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">284</span>:<span class=\"hljs-number\">14</span>)<br>  at Immediate._onImmediate (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">320</span>:<span class=\"hljs-number\">5</span>)<br>"
            },
            "isRoot": false,
            "uuid": "b71b72c4-eead-43c2-b0b7-07ce7ffc1b99",
            "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 9,
        "totalPasses": 8,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 112
      },
      {
        "title": "request.agent(app)",
        "suites": [],
        "tests": [
          {
            "title": "should save cookies",
            "fullTitle": "request.agent(app) should save cookies",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "agent<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'set-cookie'</span>, <span class=\"hljs-string\">'cookie=hey; Path=/'</span>, done);",
            "isRoot": false,
            "uuid": "9d997bee-bc76-49a3-9dc2-e20e0623f055",
            "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
            "skipped": false
          },
          {
            "title": "should send cookies",
            "fullTitle": "request.agent(app) should send cookies",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "agent<br>.get(<span class=\"hljs-string\">'/return'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>, done);",
            "isRoot": false,
            "uuid": "0b565baa-fe2f-42e4-9ecf-02ec054c3ec0",
            "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\module\\supertest.js",
        "uuid": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
        "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
        "passes": [
          {
            "title": "should save cookies",
            "fullTitle": "request.agent(app) should save cookies",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "agent<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'set-cookie'</span>, <span class=\"hljs-string\">'cookie=hey; Path=/'</span>, done);",
            "isRoot": false,
            "uuid": "9d997bee-bc76-49a3-9dc2-e20e0623f055",
            "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
            "skipped": false
          },
          {
            "title": "should send cookies",
            "fullTitle": "request.agent(app) should send cookies",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "agent<br>.get(<span class=\"hljs-string\">'/return'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>, done);",
            "isRoot": false,
            "uuid": "0b565baa-fe2f-42e4-9ecf-02ec054c3ec0",
            "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 14
      },
      {
        "title": ".<http verb> works as expected",
        "suites": [],
        "tests": [
          {
            "title": ".delete should work",
            "fullTitle": ".<http verb> works as expected .delete should work",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .delete(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "44c650dd-3937-491d-be78-b71de29de7d7",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".del should work",
            "fullTitle": ".<http verb> works as expected .del should work",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .del(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "ba306e87-339d-43a3-bdef-6ae6397b2016",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".get should work",
            "fullTitle": ".<http verb> works as expected .get should work",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .get(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "56cb5bdb-ca11-4328-ac9d-640e7c650c5f",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".post should work",
            "fullTitle": ".<http verb> works as expected .post should work",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .post(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "eb40f8e5-ab6b-46b8-a445-1d2ac83570cd",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".put should work",
            "fullTitle": ".<http verb> works as expected .put should work",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.put(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .put(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "d8fee88d-60c4-42fd-beba-fb042da86089",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\module\\supertest.js",
        "uuid": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
        "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
        "passes": [
          {
            "title": ".delete should work",
            "fullTitle": ".<http verb> works as expected .delete should work",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .delete(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "44c650dd-3937-491d-be78-b71de29de7d7",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".del should work",
            "fullTitle": ".<http verb> works as expected .del should work",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .del(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "ba306e87-339d-43a3-bdef-6ae6397b2016",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".get should work",
            "fullTitle": ".<http verb> works as expected .get should work",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .get(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "56cb5bdb-ca11-4328-ac9d-640e7c650c5f",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".post should work",
            "fullTitle": ".<http verb> works as expected .post should work",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .post(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "eb40f8e5-ab6b-46b8-a445-1d2ac83570cd",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          },
          {
            "title": ".put should work",
            "fullTitle": ".<http verb> works as expected .put should work",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.put(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .put(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
            "isRoot": false,
            "uuid": "d8fee88d-60c4-42fd-beba-fb042da86089",
            "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 30
      },
      {
        "title": "assert ordering by call order",
        "suites": [],
        "tests": [
          {
            "title": "should assert the body before status",
            "fullTitle": "assert ordering by call order should assert the body before status",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, '</span> +<br>      <span class=\"hljs-string\">'got \\'{\"message\":\"something went wrong\"}\\''</span>);<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "ed5c8b2c-fad0-432e-bc35-fd0d23cd9396",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should assert the status before body",
            "fullTitle": "assert ordering by call order should assert the status before body",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "2be8e1a4-868b-4535-8227-ca2c16ee3ac9",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should assert the fields before body and status",
            "fullTitle": "assert ordering by call order should assert the fields before body and status",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({ hello: <span class=\"hljs-string\">'world'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \"content-type\" matching /html/, '</span> +<br>      <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "49a10f5d-6100-496d-9726-5cfd74d8b28c",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call the expect function in order",
            "fullTitle": "assert ordering by call order should call the expect function in order",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    res.body.second = <span class=\"hljs-number\">2</span>;<br>  })<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    (res.body.second === <span class=\"hljs-number\">2</span>).should.be.true;<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "7aef3754-26ff-43e2-83c4-76eaa612a654",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call expect(fn) and expect(status, fn) in order",
            "fullTitle": "assert ordering by call order should call expect(fn) and expect(status, fn) in order",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "c64b436e-7990-4613-95d6-d7a1f5acfd39",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call expect(fn) and expect(header,value) in order",
            "fullTitle": "assert ordering by call order should call expect(fn) and expect(header,value) in order",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res<br>    .set(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>    .send();<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.headers[<span class=\"hljs-string\">'x-some-header'</span>] = <span class=\"hljs-string\">''</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">''</span>)<br>  .end(done);",
            "isRoot": false,
            "uuid": "bbdac720-27b3-47fd-988e-45ec9c817c71",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call expect(fn) and expect(body) in order",
            "fullTitle": "assert ordering by call order should call expect(fn) and expect(body) in order",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.json({ somebody: <span class=\"hljs-string\">'some body value'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.somebody = <span class=\"hljs-string\">'nobody'</span>;<br>  })<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)  <span class=\"hljs-comment\">// res.text should not be modified.</span><br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.text = <span class=\"hljs-string\">'gone'</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'gone'</span>)<br>  .expect(<span class=\"hljs-regexp\">/gone/</span>)<br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })  <span class=\"hljs-comment\">// res.body should not be modified</span><br>  .expect(<span class=\"hljs-string\">'gone'</span>, done);",
            "isRoot": false,
            "uuid": "77c87993-2192-4012-a53d-dba4a9bfd782",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\module\\supertest.js",
        "uuid": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
        "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
        "passes": [
          {
            "title": "should assert the body before status",
            "fullTitle": "assert ordering by call order should assert the body before status",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, '</span> +<br>      <span class=\"hljs-string\">'got \\'{\"message\":\"something went wrong\"}\\''</span>);<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "ed5c8b2c-fad0-432e-bc35-fd0d23cd9396",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should assert the status before body",
            "fullTitle": "assert ordering by call order should assert the status before body",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "2be8e1a4-868b-4535-8227-ca2c16ee3ac9",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should assert the fields before body and status",
            "fullTitle": "assert ordering by call order should assert the fields before body and status",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({ hello: <span class=\"hljs-string\">'world'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \"content-type\" matching /html/, '</span> +<br>      <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "49a10f5d-6100-496d-9726-5cfd74d8b28c",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call the expect function in order",
            "fullTitle": "assert ordering by call order should call the expect function in order",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    res.body.second = <span class=\"hljs-number\">2</span>;<br>  })<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    (res.body.second === <span class=\"hljs-number\">2</span>).should.be.true;<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "7aef3754-26ff-43e2-83c4-76eaa612a654",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call expect(fn) and expect(status, fn) in order",
            "fullTitle": "assert ordering by call order should call expect(fn) and expect(status, fn) in order",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    done();<br>  });",
            "isRoot": false,
            "uuid": "c64b436e-7990-4613-95d6-d7a1f5acfd39",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call expect(fn) and expect(header,value) in order",
            "fullTitle": "assert ordering by call order should call expect(fn) and expect(header,value) in order",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res<br>    .set(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>    .send();<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.headers[<span class=\"hljs-string\">'x-some-header'</span>] = <span class=\"hljs-string\">''</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">''</span>)<br>  .end(done);",
            "isRoot": false,
            "uuid": "bbdac720-27b3-47fd-988e-45ec9c817c71",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          },
          {
            "title": "should call expect(fn) and expect(body) in order",
            "fullTitle": "assert ordering by call order should call expect(fn) and expect(body) in order",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.json({ somebody: <span class=\"hljs-string\">'some body value'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.somebody = <span class=\"hljs-string\">'nobody'</span>;<br>  })<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)  <span class=\"hljs-comment\">// res.text should not be modified.</span><br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.text = <span class=\"hljs-string\">'gone'</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'gone'</span>)<br>  .expect(<span class=\"hljs-regexp\">/gone/</span>)<br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })  <span class=\"hljs-comment\">// res.body should not be modified</span><br>  .expect(<span class=\"hljs-string\">'gone'</span>, done);",
            "isRoot": false,
            "uuid": "77c87993-2192-4012-a53d-dba4a9bfd782",
            "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 47
      },
      {
        "title": "request.get(url).query(vals) works as expected",
        "suites": [],
        "tests": [
          {
            "title": "normal single query string value works",
            "fullTitle": "request.get(url).query(vals) works as expected normal single query string value works",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: <span class=\"hljs-string\">'Test1'</span> })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "3daffec6-aaa7-47bd-9ffa-91125455a613",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          },
          {
            "title": "array query string value works",
            "fullTitle": "request.get(url).query(vals) works as expected array query string value works",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>, <span class=\"hljs-string\">'Test2'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1&amp;val%5B%5D=Test2'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "2121e774-a32b-47ad-8593-22eb8fca1406",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          },
          {
            "title": "array query string value work even with single value",
            "fullTitle": "request.get(url).query(vals) works as expected array query string value work even with single value",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "7e14162a-db87-42bb-ac50-c6a12511498f",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          },
          {
            "title": "object query string value works",
            "fullTitle": "request.get(url).query(vals) works as expected object query string value works",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val.test);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: { test: <span class=\"hljs-string\">'Test1'</span> } })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "21738521-6637-4c6e-bd9d-bd76237a3b85",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\module\\supertest.js",
        "uuid": "016a05f7-4e05-4533-909f-efe652fc039e",
        "fullFile": "E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\supertest.js",
        "passes": [
          {
            "title": "normal single query string value works",
            "fullTitle": "request.get(url).query(vals) works as expected normal single query string value works",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: <span class=\"hljs-string\">'Test1'</span> })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "3daffec6-aaa7-47bd-9ffa-91125455a613",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          },
          {
            "title": "array query string value works",
            "fullTitle": "request.get(url).query(vals) works as expected array query string value works",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>, <span class=\"hljs-string\">'Test2'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1&amp;val%5B%5D=Test2'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "2121e774-a32b-47ad-8593-22eb8fca1406",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          },
          {
            "title": "array query string value work even with single value",
            "fullTitle": "request.get(url).query(vals) works as expected array query string value work even with single value",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "7e14162a-db87-42bb-ac50-c6a12511498f",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          },
          {
            "title": "object query string value works",
            "fullTitle": "request.get(url).query(vals) works as expected object query string value works",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val.test);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: { test: <span class=\"hljs-string\">'Test1'</span> } })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
            "isRoot": false,
            "uuid": "21738521-6637-4c6e-bd9d-bd76237a3b85",
            "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 26
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "c8bb9252-c1fb-4f4b-9c27-6426532310bb",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should be supported",
      "fullTitle": "request(url) should be supported",
      "timedOut": false,
      "duration": 139,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>, done);<br>});",
      "isRoot": false,
      "uuid": "c2656941-5427-484b-aefd-10bbab17fd98",
      "parentUUID": "7db6554f-2430-423c-8d15-5ab96381654d",
      "skipped": false
    },
    {
      "title": "should set `this` to the test object when calling cb",
      "fullTitle": ".end(cb) should set `this` to the test object when calling cb",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  <span class=\"hljs-keyword\">var</span> test = request(url).get(<span class=\"hljs-string\">'/'</span>);<br>  test.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "966b10c2-da72-4be6-96c1-c665edad6773",
      "parentUUID": "11390035-8e9d-4239-bc0f-ec26ad62c4d3",
      "skipped": false
    },
    {
      "title": "should fire up the app on an ephemeral port",
      "fullTitle": "request(app) should fire up the app on an ephemeral port",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "76a3432b-bf21-492e-ad2a-fb5c96dfd234",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with an active server",
      "fullTitle": "request(app) should work with an active server",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>server = app.listen(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(server)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "8cac8807-533f-4901-98cf-fef9abef1d8d",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with remote server",
      "fullTitle": "request(app) should work with remote server",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>app.listen(<span class=\"hljs-number\">4001</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(<span class=\"hljs-string\">'http://localhost:4001'</span>)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "16f8a41c-4251-4d7f-88b9-55f5d3f79de9",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with a https server",
      "fullTitle": "request(app) should work with a https server",
      "timedOut": false,
      "duration": 2,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> fixtures = path.join(__dirname, <span class=\"hljs-string\">'fixtures'</span>);<br><span class=\"hljs-keyword\">var</span> server = https.createServer({<br>  key: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_key.pem'</span>)),<br>  cert: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_cert.pem'</span>))<br>}, app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(server)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
      "err": {
        "name": "Error",
        "message": "ENOENT: no such file or directory, open 'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'",
        "stack": "<span class=\"hljs-built_in\">Error</span>: ENOENT: no such file or directory, open <span class=\"hljs-string\">'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'</span><br>  at <span class=\"hljs-built_in\">Error</span> (native)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.openSync (fs.js:<span class=\"hljs-number\">549</span>:<span class=\"hljs-number\">18</span>)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.readFileSync (fs.js:<span class=\"hljs-number\">397</span>:<span class=\"hljs-number\">15</span>)<br>  at Context.&lt;anonymous&gt; (E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\<span class=\"hljs-built_in\">module</span>\\supertest.js:<span class=\"hljs-number\">108</span>:<span class=\"hljs-number\">15</span>)<br>  at callFnAsync (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">349</span>:<span class=\"hljs-number\">8</span>)<br>  at Test.Runnable.run (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">7</span>)<br>  at Runner.runTest (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">422</span>:<span class=\"hljs-number\">10</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">528</span>:<span class=\"hljs-number\">12</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">342</span>:<span class=\"hljs-number\">14</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">352</span>:<span class=\"hljs-number\">7</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">284</span>:<span class=\"hljs-number\">14</span>)<br>  at Immediate._onImmediate (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">320</span>:<span class=\"hljs-number\">5</span>)<br>"
      },
      "isRoot": false,
      "uuid": "a10b7fdd-6147-4906-ac9b-5df18d989f51",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with .send() etc",
      "fullTitle": "request(app) should work with .send() etc",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.use(bodyParser.json());<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(req.body.name);<br>});<br>request(app)<br>.post(<span class=\"hljs-string\">'/'</span>)<br>.send({ name: <span class=\"hljs-string\">'tobi'</span> })<br>.expect(<span class=\"hljs-string\">'tobi'</span>, done);",
      "isRoot": false,
      "uuid": "9fbe1b34-f21e-4a60-90e7-c1ab9095b0a8",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work when unbuffered",
      "fullTitle": "request(app) should work when unbuffered",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Hello'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Hello'</span>, done);",
      "isRoot": false,
      "uuid": "7f3146fa-636e-49fe-ad27-e9ee1afe1e0d",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should default redirects to 0",
      "fullTitle": "request(app) should default redirects to 0",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">302</span>, done);",
      "isRoot": false,
      "uuid": "2589e2b3-92e3-4bcd-acec-465fe1dccdac",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should handle redirects",
      "fullTitle": "request(app) should handle redirects",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/login'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Login'</span>);<br>});<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.redirects(<span class=\"hljs-number\">1</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(res);<br>  res.status.should.be.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Login'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "0d41dc6f-b651-49ec-93ab-96cd323d3967",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should handle socket errors",
      "fullTitle": "request(app) should handle socket errors",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.destroy();<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.exist(err);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "54aa01e7-cf48-4a15-8869-4f8b9043b441",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should close server",
      "fullTitle": ".end(fn) should close server",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  done();<br>});",
      "isRoot": false,
      "uuid": "e62a786b-7536-4906-b5e3-87675ccb545b",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should wait for server to close before invoking fn",
      "fullTitle": ".end(fn) should wait for server to close before invoking fn",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> closed = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed.should.be.true;<br>  done();<br>});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed = <span class=\"hljs-literal\">true</span>;<br>});",
      "isRoot": false,
      "uuid": "1e7a4dd6-62d7-4669-8948-4dfa393c2058",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should support nested requests",
      "fullTitle": ".end(fn) should support nested requests",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test = request(app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  test<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "d27c5e26-ec5c-4c55-a104-cd9ce8344660",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should include the response in the error callback",
      "fullTitle": ".end(fn) should include the response in the error callback",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  should.exist(res);<br>  <span class=\"hljs-comment\">// Duck-typing response, just in case.</span><br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "2112046f-a1d3-471a-a034-9910f7f5f37e",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should set `this` to the test object when calling the error callback",
      "fullTitle": ".end(fn) should set `this` to the test object when calling the error callback",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>test = request(app).get(<span class=\"hljs-string\">'/'</span>);<br>test.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>}).end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "b827c688-786b-4cbb-80f7-56538ddd79ef",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should handle an undefined Response",
      "fullTitle": ".end(fn) should handle an undefined Response",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    res.end();<br>  }, <span class=\"hljs-number\">20</span>);<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .timeout(<span class=\"hljs-number\">1</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "14c4a603-f50a-4c3d-a16d-18e600f19fb3",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should handle error returned when server goes down",
      "fullTitle": ".end(fn) should handle error returned when server goes down",
      "timedOut": false,
      "duration": 1016,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end();<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  server.close();<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "9a383872-4477-4073-884f-9061612d41bd",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should assert the response status",
      "fullTitle": ".expect(status[, fn]) should assert the response status",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">404</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 404 \"Not Found\", got 200 \"OK\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "312721f6-1d11-4f90-9b05-0226460f876e",
      "parentUUID": "4de7244e-6bc9-45a7-b650-7758c6bba8cb",
      "skipped": false
    },
    {
      "title": "should assert only status",
      "fullTitle": ".expect(status) should assert only status",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "de1c24dd-bbf1-4c16-aede-426c6a0dec55",
      "parentUUID": "855f575c-537c-4fc3-a3e5-eaa7d5eb204d",
      "skipped": false
    },
    {
      "title": "should assert the response body and status",
      "fullTitle": ".expect(status, body[, fn]) should assert the response body and status",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'foo'</span>, done);",
      "isRoot": false,
      "uuid": "65978c2a-bdbe-48f1-bd79-4c2dc2007d4b",
      "parentUUID": "1f870548-e970-430f-af91-bc0685c89a75",
      "skipped": false
    },
    {
      "title": "should not quietly pass on failure",
      "fullTitle": "when the body argument is an empty string should not quietly pass on failure",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">''</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'\\' response body, got \\'foo\\''</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "ba2eb4b0-a126-4d75-b88d-d19f0e299e10",
      "parentUUID": "30bb25bc-da15-4f1d-8509-34c81385851c",
      "skipped": false
    },
    {
      "title": "should assert the response body",
      "fullTitle": ".expect(body[, fn]) should assert the response body",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, got \\'{\"foo\":\"bar\"}\\''</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "5d025940-bcc4-4d16-bc08-c7dd8c624594",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the status before the body",
      "fullTitle": ".expect(body[, fn]) should assert the status before the body",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).send({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "bb1f6c08-c7a6-4875-92c0-ef4c9c509e98",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the response text",
      "fullTitle": ".expect(body[, fn]) should assert the response text",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'{\"foo\":\"bar\"}'</span>, done);",
      "isRoot": false,
      "uuid": "4c74f0d7-69f5-469c-8be7-8eb914487597",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the parsed response body",
      "fullTitle": ".expect(body[, fn]) should assert the parsed response body",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect({ foo: <span class=\"hljs-string\">'baz'</span> })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected { foo: \\'baz\\' } response body, got { foo: \\'bar\\' }'</span>);<br>  request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect({ foo: <span class=\"hljs-string\">'bar'</span> })<br>  .end(done);<br>});",
      "isRoot": false,
      "uuid": "ac6afbc4-5c54-4eb6-99c9-4c5d6d2123f4",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should support regular expressions",
      "fullTitle": ".expect(body[, fn]) should support regular expressions",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foobar'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/^bar/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected body \\'foobar\\' to match /^bar/'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "7ebf6319-5397-45b3-bac5-644f9a8d49d0",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert response body multiple times",
      "fullTitle": ".expect(body[, fn]) should assert response body multiple times",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">\"expected 'hey' response body, got 'hey tj'\"</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "6d70fcb3-78df-4a08-a7ab-f5e2060c4db3",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert response body multiple times with no exception",
      "fullTitle": ".expect(body[, fn]) should assert response body multiple times with no exception",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-regexp\">/^hey/</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>, done);",
      "isRoot": false,
      "uuid": "b451b843-b04d-4cf3-aacc-d39b92afc046",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the header field presence",
      "fullTitle": ".expect(field, value[, fn]) should assert the header field presence",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Foo'</span>, <span class=\"hljs-string\">'bar'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Foo\" header field'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "2298ab8e-df02-4680-a033-9dd798fb11e1",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should assert the header field value",
      "fullTitle": ".expect(field, value[, fn]) should assert the header field value",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" of \"text/html\", '</span> +<br>    <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "88fc8bc2-0309-42d7-86b3-f935e7bdfffd",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should assert multiple fields",
      "fullTitle": ".expect(field, value[, fn]) should assert multiple fields",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html; charset=utf-8'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-string\">'3'</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "0d5ac5a1-e923-4cf0-a280-14f3ff9715ef",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should support regular expressions",
      "fullTitle": ".expect(field, value[, fn]) should support regular expressions",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/^application/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /^application/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "d787ab22-337b-45be-89a6-8e5b4fd582b6",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should support numbers",
      "fullTitle": ".expect(field, value[, fn]) should support numbers",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-number\">4</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Length\" of \"4\", got \"3\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "2c40363c-0a8e-46f6-a12d-9da1ba8c74ff",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "reports errors",
      "fullTitle": "handling arbitrary expect functions reports errors",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'failed'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'failed'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "313f4d8b-55ae-4663-853b-36dd5ef1c76b",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "ensures truthy non-errors returned from asserts are not promoted to errors",
      "fullTitle": "handling arbitrary expect functions ensures truthy non-errors returned from asserts are not promoted to errors",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'some descriptive error'</span>;<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.not.exist(err);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "2d259c0f-1835-4cb7-a4e6-55ed14157a7f",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "ensures truthy errors returned from asserts are throw to end",
      "fullTitle": "handling arbitrary expect functions ensures truthy errors returned from asserts are throw to end",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'some descriptive error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'some descriptive error'</span>);<br>  (err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>).should.be.true;<br>  done();<br>});",
      "isRoot": false,
      "uuid": "3fa94449-d775-49c4-b546-4d9cce966d9a",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "doesn't create false negatives",
      "fullTitle": "handling arbitrary expect functions doesn't create false negatives",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.end(done);",
      "isRoot": false,
      "uuid": "b85f39b4-d743-4122-997a-8edeb22fcfbe",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "handles multiple asserts",
      "fullTitle": "handling arbitrary expect functions handles multiple asserts",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> calls = [];<br>get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>; })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> callCount = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">count, i</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> count + calls[i];<br>  }, <span class=\"hljs-number\">0</span>);<br>  callCount.should.equal(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"didn't see all assertions run\"</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "202e43c0-fac4-4237-83d5-29ac6780877e",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "plays well with normal assertions - no false positives",
      "fullTitle": "handling arbitrary expect functions plays well with normal assertions - no false positives",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/json/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.match(<span class=\"hljs-regexp\">/Content-Type/</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "095a604f-36e0-472e-aa04-b39ab6669cca",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "plays well with normal assertions - no false negatives",
      "fullTitle": "handling arbitrary expect functions plays well with normal assertions - no false negatives",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "ee590d6a-7498-44d0-81ee-b033feb736b6",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "should work",
      "fullTitle": "handling multiple assertions per field should work",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "8020fbc0-4b05-4d4b-80f0-f4af499e6774",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should return an error if the first one fails",
      "fullTitle": "handling multiple assertions per field should return an error if the first one fails",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "7a3ff17f-89f0-47d2-8948-46be7f0fffb5",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should return an error if a middle one fails",
      "fullTitle": "handling multiple assertions per field should return an error if a middle one fails",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "0b5e6aec-eea2-4d5b-8fbb-717ee555c6dc",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should return an error if the last one fails",
      "fullTitle": "handling multiple assertions per field should return an error if the last one fails",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "af109dfe-ceca-4328-ac00-a932a2e26692",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should save cookies",
      "fullTitle": "request.agent(app) should save cookies",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agent<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'set-cookie'</span>, <span class=\"hljs-string\">'cookie=hey; Path=/'</span>, done);",
      "isRoot": false,
      "uuid": "79844074-e113-4fcf-848d-f66f32583696",
      "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
      "skipped": false
    },
    {
      "title": "should send cookies",
      "fullTitle": "request.agent(app) should send cookies",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agent<br>.get(<span class=\"hljs-string\">'/return'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>, done);",
      "isRoot": false,
      "uuid": "c43e2b47-af3e-45c4-a6ca-a5e935f52ce2",
      "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
      "skipped": false
    },
    {
      "title": ".delete should work",
      "fullTitle": ".<http verb> works as expected .delete should work",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .delete(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "ffb73485-75f8-477e-a109-e8e5d2ec6d37",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".del should work",
      "fullTitle": ".<http verb> works as expected .del should work",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .del(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "57a3c730-a900-4df5-9243-1ae1159b42b3",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".get should work",
      "fullTitle": ".<http verb> works as expected .get should work",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .get(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "b0eaf0dc-1fe6-4ec0-a5d7-e847261cdb57",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".post should work",
      "fullTitle": ".<http verb> works as expected .post should work",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .post(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "ad657de2-0d5e-4ebf-a0ec-1ba4dc1cfdc1",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".put should work",
      "fullTitle": ".<http verb> works as expected .put should work",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.put(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .put(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "1a0badc7-620e-41e5-b97f-5d4b730203ab",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": "should assert the body before status",
      "fullTitle": "assert ordering by call order should assert the body before status",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, '</span> +<br>      <span class=\"hljs-string\">'got \\'{\"message\":\"something went wrong\"}\\''</span>);<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "3fc31ef9-e6f2-4d33-af30-1e5edcac4382",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should assert the status before body",
      "fullTitle": "assert ordering by call order should assert the status before body",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "0acaa5e6-af49-4991-8598-869d7e1533f8",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should assert the fields before body and status",
      "fullTitle": "assert ordering by call order should assert the fields before body and status",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({ hello: <span class=\"hljs-string\">'world'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \"content-type\" matching /html/, '</span> +<br>      <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "79af1a13-0e5e-4cbf-a29b-69f36c5058d6",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call the expect function in order",
      "fullTitle": "assert ordering by call order should call the expect function in order",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    res.body.second = <span class=\"hljs-number\">2</span>;<br>  })<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    (res.body.second === <span class=\"hljs-number\">2</span>).should.be.true;<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "931748a1-762f-4f17-bd1e-2dd3818bc64b",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call expect(fn) and expect(status, fn) in order",
      "fullTitle": "assert ordering by call order should call expect(fn) and expect(status, fn) in order",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "5067f608-2fef-4092-b464-e888763f17b5",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call expect(fn) and expect(header,value) in order",
      "fullTitle": "assert ordering by call order should call expect(fn) and expect(header,value) in order",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res<br>    .set(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>    .send();<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.headers[<span class=\"hljs-string\">'x-some-header'</span>] = <span class=\"hljs-string\">''</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">''</span>)<br>  .end(done);",
      "isRoot": false,
      "uuid": "2b5656f2-9d43-433a-a5dd-de4153cb277e",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call expect(fn) and expect(body) in order",
      "fullTitle": "assert ordering by call order should call expect(fn) and expect(body) in order",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.json({ somebody: <span class=\"hljs-string\">'some body value'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.somebody = <span class=\"hljs-string\">'nobody'</span>;<br>  })<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)  <span class=\"hljs-comment\">// res.text should not be modified.</span><br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.text = <span class=\"hljs-string\">'gone'</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'gone'</span>)<br>  .expect(<span class=\"hljs-regexp\">/gone/</span>)<br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })  <span class=\"hljs-comment\">// res.body should not be modified</span><br>  .expect(<span class=\"hljs-string\">'gone'</span>, done);",
      "isRoot": false,
      "uuid": "32b97bec-52d2-4f96-b799-cafe6384e2be",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "normal single query string value works",
      "fullTitle": "request.get(url).query(vals) works as expected normal single query string value works",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: <span class=\"hljs-string\">'Test1'</span> })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "a4093c4c-910b-4a6d-8d8f-0968df3d17d8",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    },
    {
      "title": "array query string value works",
      "fullTitle": "request.get(url).query(vals) works as expected array query string value works",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>, <span class=\"hljs-string\">'Test2'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1&amp;val%5B%5D=Test2'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "49c907ef-03ed-4a78-b64c-966e7b4c9a7e",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    },
    {
      "title": "array query string value work even with single value",
      "fullTitle": "request.get(url).query(vals) works as expected array query string value work even with single value",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "36448788-41a3-4aed-94ee-25bf560c6269",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    },
    {
      "title": "object query string value works",
      "fullTitle": "request.get(url).query(vals) works as expected object query string value works",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val.test);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: { test: <span class=\"hljs-string\">'Test1'</span> } })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "e96f5573-7700-4715-bb89-f8fc20ccc2d0",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should be supported",
      "fullTitle": "request(url) should be supported",
      "timedOut": false,
      "duration": 139,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>, done);<br>});",
      "isRoot": false,
      "uuid": "b8ed5c35-ba07-4f3a-9260-4222bac65fc1",
      "parentUUID": "7db6554f-2430-423c-8d15-5ab96381654d",
      "skipped": false
    },
    {
      "title": "should set `this` to the test object when calling cb",
      "fullTitle": ".end(cb) should set `this` to the test object when calling cb",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> s;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hello'</span>);<br>});<br>s = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + s.address().port;<br>  <span class=\"hljs-keyword\">var</span> test = request(url).get(<span class=\"hljs-string\">'/'</span>);<br>  test.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "bca7ee9f-b631-46f5-96c3-40bde5187414",
      "parentUUID": "11390035-8e9d-4239-bc0f-ec26ad62c4d3",
      "skipped": false
    },
    {
      "title": "should fire up the app on an ephemeral port",
      "fullTitle": "request(app) should fire up the app on an ephemeral port",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "dcde0746-dc57-48d7-b328-4d26519e3fc0",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with an active server",
      "fullTitle": "request(app) should work with an active server",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>server = app.listen(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(server)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "cda0576c-d4eb-4753-bc40-016947e7217a",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with remote server",
      "fullTitle": "request(app) should work with remote server",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>app.listen(<span class=\"hljs-number\">4001</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  request(<span class=\"hljs-string\">'http://localhost:4001'</span>)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "c16a03b9-8f9d-415c-a93d-9f110ace083f",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work with .send() etc",
      "fullTitle": "request(app) should work with .send() etc",
      "timedOut": false,
      "duration": 62,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.use(bodyParser.json());<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(req.body.name);<br>});<br>request(app)<br>.post(<span class=\"hljs-string\">'/'</span>)<br>.send({ name: <span class=\"hljs-string\">'tobi'</span> })<br>.expect(<span class=\"hljs-string\">'tobi'</span>, done);",
      "isRoot": false,
      "uuid": "c7de3842-62a9-4b58-bfbc-996fdb87e23c",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should work when unbuffered",
      "fullTitle": "request(app) should work when unbuffered",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Hello'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Hello'</span>, done);",
      "isRoot": false,
      "uuid": "bcc69209-fcad-441e-92cd-c55d1c35cebf",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should default redirects to 0",
      "fullTitle": "request(app) should default redirects to 0",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">302</span>, done);",
      "isRoot": false,
      "uuid": "3a745f88-7d9f-4293-bb18-9883c9f5ef65",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should handle redirects",
      "fullTitle": "request(app) should handle redirects",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/login'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end(<span class=\"hljs-string\">'Login'</span>);<br>});<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.redirect(<span class=\"hljs-string\">'/login'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.redirects(<span class=\"hljs-number\">1</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(res);<br>  res.status.should.be.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Login'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "d819452d-b6d4-4191-8408-d35a08b2a37a",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should handle socket errors",
      "fullTitle": "request(app) should handle socket errors",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.destroy();<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.exist(err);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "56eec3d0-f706-472e-a215-4289d5038e49",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    },
    {
      "title": "should close server",
      "fullTitle": ".end(fn) should close server",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  done();<br>});",
      "isRoot": false,
      "uuid": "7cbf5540-fd0d-4d6f-bed4-df42323ce107",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should wait for server to close before invoking fn",
      "fullTitle": ".end(fn) should wait for server to close before invoking fn",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> closed = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test = request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed.should.be.true;<br>  done();<br>});<br>test._server.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  closed = <span class=\"hljs-literal\">true</span>;<br>});",
      "isRoot": false,
      "uuid": "5fd0b3cc-7e71-485f-8330-808159718b0f",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should support nested requests",
      "fullTitle": ".end(fn) should support nested requests",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test = request(app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>});<br>test<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  test<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>    res.text.should.equal(<span class=\"hljs-string\">'supertest FTW!'</span>);<br>    done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "f1379217-1c00-430a-ba9b-e2ffd1149cd2",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should include the response in the error callback",
      "fullTitle": ".end(fn) should include the response in the error callback",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  should.exist(res);<br>  <span class=\"hljs-comment\">// Duck-typing response, just in case.</span><br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "26e73a46-1ac3-4a17-baf1-1a8511a1b59b",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should set `this` to the test object when calling the error callback",
      "fullTitle": ".end(fn) should set `this` to the test object when calling the error callback",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> test;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'whatever'</span>);<br>});<br>test = request(app).get(<span class=\"hljs-string\">'/'</span>);<br>test.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Some error'</span>);<br>}).end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  should.exist(err);<br>  <span class=\"hljs-keyword\">this</span>.should.eql(test);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "43a6a7f3-9330-4093-bf15-8091dbd5a68d",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should handle an undefined Response",
      "fullTitle": ".end(fn) should handle an undefined Response",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    res.end();<br>  }, <span class=\"hljs-number\">20</span>);<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .timeout(<span class=\"hljs-number\">1</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "320a2df7-72f5-4730-a164-254a9efbf081",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should handle error returned when server goes down",
      "fullTitle": ".end(fn) should handle error returned when server goes down",
      "timedOut": false,
      "duration": 1016,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> server;<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.end();<br>});<br>server = app.listen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'http://localhost:'</span> + server.address().port;<br>  server.close();<br>  request(url)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    err.should.be.an.instanceof(<span class=\"hljs-built_in\">Error</span>);<br>    <span class=\"hljs-keyword\">return</span> done();<br>  });<br>});",
      "isRoot": false,
      "uuid": "544ad03b-658b-4711-bc9f-56154c06598d",
      "parentUUID": "788c73a2-e486-4818-9434-96bd15f55a66",
      "skipped": false
    },
    {
      "title": "should assert the response status",
      "fullTitle": ".expect(status[, fn]) should assert the response status",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">404</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 404 \"Not Found\", got 200 \"OK\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "3f5e9aa4-3bc9-4268-af01-53338bb1d09a",
      "parentUUID": "4de7244e-6bc9-45a7-b650-7758c6bba8cb",
      "skipped": false
    },
    {
      "title": "should assert only status",
      "fullTitle": ".expect(status) should assert only status",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "7225d138-2235-4832-8f8c-04fc216c4c52",
      "parentUUID": "855f575c-537c-4fc3-a3e5-eaa7d5eb204d",
      "skipped": false
    },
    {
      "title": "should assert the response body and status",
      "fullTitle": ".expect(status, body[, fn]) should assert the response body and status",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'foo'</span>, done);",
      "isRoot": false,
      "uuid": "08a25696-b32c-48e7-ad06-1eb2ae1b74ab",
      "parentUUID": "1f870548-e970-430f-af91-bc0685c89a75",
      "skipped": false
    },
    {
      "title": "should not quietly pass on failure",
      "fullTitle": "when the body argument is an empty string should not quietly pass on failure",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foo'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">''</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'\\' response body, got \\'foo\\''</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "e5d569a2-0020-4381-9154-737a87f10c34",
      "parentUUID": "30bb25bc-da15-4f1d-8509-34c81385851c",
      "skipped": false
    },
    {
      "title": "should assert the response body",
      "fullTitle": ".expect(body[, fn]) should assert the response body",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, got \\'{\"foo\":\"bar\"}\\''</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "b3ba178a-a15b-441d-b2f8-3aa78250f0cd",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the status before the body",
      "fullTitle": ".expect(body[, fn]) should assert the status before the body",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).send({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-number\">200</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "7f28b5c1-5ab0-48a4-b396-a106285bbff3",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the response text",
      "fullTitle": ".expect(body[, fn]) should assert the response text",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'{\"foo\":\"bar\"}'</span>, done);",
      "isRoot": false,
      "uuid": "f9e74dd4-6856-4ddf-9951-47e37a5b912b",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the parsed response body",
      "fullTitle": ".expect(body[, fn]) should assert the parsed response body",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect({ foo: <span class=\"hljs-string\">'baz'</span> })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected { foo: \\'baz\\' } response body, got { foo: \\'bar\\' }'</span>);<br>  request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect({ foo: <span class=\"hljs-string\">'bar'</span> })<br>  .end(done);<br>});",
      "isRoot": false,
      "uuid": "b95fa275-ed92-4653-91f5-eda12adaf34e",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should support regular expressions",
      "fullTitle": ".expect(body[, fn]) should support regular expressions",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'foobar'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/^bar/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected body \\'foobar\\' to match /^bar/'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "773c8302-4b0f-460e-8d7d-bfa82d6f1450",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert response body multiple times",
      "fullTitle": ".expect(body[, fn]) should assert response body multiple times",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">\"expected 'hey' response body, got 'hey tj'\"</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "fcbcc29e-1729-4c97-a7a3-f9cb794a9b4c",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert response body multiple times with no exception",
      "fullTitle": ".expect(body[, fn]) should assert response body multiple times with no exception",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey tj'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-regexp\">/tj/</span>)<br>.expect(<span class=\"hljs-regexp\">/^hey/</span>)<br>.expect(<span class=\"hljs-string\">'hey tj'</span>, done);",
      "isRoot": false,
      "uuid": "9fc18593-9d9b-4abb-aee1-60a73cbd1f2e",
      "parentUUID": "bafa3446-8aa6-4a27-a2de-48f605f24a00",
      "skipped": false
    },
    {
      "title": "should assert the header field presence",
      "fullTitle": ".expect(field, value[, fn]) should assert the header field presence",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Foo'</span>, <span class=\"hljs-string\">'bar'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Foo\" header field'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "3906bf00-a2f4-42ec-8a43-c9e171fb4a39",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should assert the header field value",
      "fullTitle": ".expect(field, value[, fn]) should assert the header field value",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send({ foo: <span class=\"hljs-string\">'bar'</span> });<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" of \"text/html\", '</span> +<br>    <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "2e484333-35a7-4b4a-a100-c8880c31bd8f",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should assert multiple fields",
      "fullTitle": ".expect(field, value[, fn]) should assert multiple fields",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'text/html; charset=utf-8'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-string\">'3'</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "41ed5514-e926-48a7-85b9-cb664e8deb17",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should support regular expressions",
      "fullTitle": ".expect(field, value[, fn]) should support regular expressions",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/^application/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /^application/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "4fa1764b-2fe3-4b8c-94da-8feef690c2b8",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "should support numbers",
      "fullTitle": ".expect(field, value[, fn]) should support numbers",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-number\">4</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Length\" of \"4\", got \"3\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "0e320c0c-ce68-4c0f-be72-a2453a3aac04",
      "parentUUID": "cb590cf0-46f8-4de8-a1a4-735632727ade",
      "skipped": false
    },
    {
      "title": "reports errors",
      "fullTitle": "handling arbitrary expect functions reports errors",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'failed'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'failed'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "92f5fe68-334a-490b-83d4-d26d8b7823b8",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "ensures truthy non-errors returned from asserts are not promoted to errors",
      "fullTitle": "handling arbitrary expect functions ensures truthy non-errors returned from asserts are not promoted to errors",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'some descriptive error'</span>;<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  should.not.exist(err);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "06c1bae0-79bf-45f4-9fe1-4b71b66e808e",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "ensures truthy errors returned from asserts are throw to end",
      "fullTitle": "handling arbitrary expect functions ensures truthy errors returned from asserts are throw to end",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'some descriptive error'</span>);<br>})<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'some descriptive error'</span>);<br>  (err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>).should.be.true;<br>  done();<br>});",
      "isRoot": false,
      "uuid": "aaafedfb-53ba-4c4b-a750-f7e8756a8f14",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "doesn't create false negatives",
      "fullTitle": "handling arbitrary expect functions doesn't create false negatives",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.end(done);",
      "isRoot": false,
      "uuid": "c424e4c5-fee2-4883-95e7-335cf7519638",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "handles multiple asserts",
      "fullTitle": "handling arbitrary expect functions handles multiple asserts",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> calls = [];<br>get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>; })<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{ calls[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>; })<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> callCount = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">count, i</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> count + calls[i];<br>  }, <span class=\"hljs-number\">0</span>);<br>  callCount.should.equal(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"didn't see all assertions run\"</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "6b236fda-5beb-43fe-8110-f5fd703871f6",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "plays well with normal assertions - no false positives",
      "fullTitle": "handling arbitrary expect functions plays well with normal assertions - no false positives",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/json/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.match(<span class=\"hljs-regexp\">/Content-Type/</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "8f846f66-f4ef-4b71-80bb-77f1725dac71",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "plays well with normal assertions - no false negatives",
      "fullTitle": "handling arbitrary expect functions plays well with normal assertions - no false negatives",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "get<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{})<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "9769822f-9164-47c3-ac7f-0dae98857157",
      "parentUUID": "b419d55f-8029-452c-adb0-a412aaaf78d7",
      "skipped": false
    },
    {
      "title": "should work",
      "fullTitle": "handling multiple assertions per field should work",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(done);",
      "isRoot": false,
      "uuid": "f64e30be-1505-4247-92e2-d51c742ecd3c",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should return an error if the first one fails",
      "fullTitle": "handling multiple assertions per field should return an error if the first one fails",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "b9e1de33-ccc3-4f38-a895-cd42d0674c13",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should return an error if a middle one fails",
      "fullTitle": "handling multiple assertions per field should return an error if a middle one fails",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "4f78b516-9452-4190-9807-f46a7e30e28b",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should return an error if the last one fails",
      "fullTitle": "handling multiple assertions per field should return an error if the last one fails",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/text/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>.expect(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-regexp\">/bloop/</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{<br>  err.message.should.equal(<span class=\"hljs-string\">'expected \"Content-Type\" matching /bloop/, '</span> +<br>    <span class=\"hljs-string\">'got \"text/html; charset=utf-8\"'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "32383b73-3645-4cb3-bc7e-7548b6053e07",
      "parentUUID": "ecbf3508-0317-4019-9cb2-316c9288ed1f",
      "skipped": false
    },
    {
      "title": "should save cookies",
      "fullTitle": "request.agent(app) should save cookies",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agent<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.expect(<span class=\"hljs-string\">'set-cookie'</span>, <span class=\"hljs-string\">'cookie=hey; Path=/'</span>, done);",
      "isRoot": false,
      "uuid": "64357678-578a-4699-a4c3-b69be8f949a9",
      "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
      "skipped": false
    },
    {
      "title": "should send cookies",
      "fullTitle": "request.agent(app) should send cookies",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agent<br>.get(<span class=\"hljs-string\">'/return'</span>)<br>.expect(<span class=\"hljs-string\">'hey'</span>, done);",
      "isRoot": false,
      "uuid": "6ec67eab-3ac8-4ef4-a280-a32b2f598bf9",
      "parentUUID": "55a24dfe-a708-4ec4-9256-eb2ec55771b5",
      "skipped": false
    },
    {
      "title": ".delete should work",
      "fullTitle": ".<http verb> works as expected .delete should work",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .delete(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "36f97eef-e815-429c-bb38-d79318b5b658",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".del should work",
      "fullTitle": ".<http verb> works as expected .del should work",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.delete(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .del(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "b5983524-e68d-4e45-af99-4aaa731e7014",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".get should work",
      "fullTitle": ".<http verb> works as expected .get should work",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .get(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "c1aa2737-cce1-4025-afe7-082ee720baff",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".post should work",
      "fullTitle": ".<http verb> works as expected .post should work",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .post(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "f07d146d-acc5-440a-8cf4-5081df61ba0d",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": ".put should work",
      "fullTitle": ".<http verb> works as expected .put should work",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.put(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.sendStatus(<span class=\"hljs-number\">200</span>);<br>});<br>request(app)<br>    .put(<span class=\"hljs-string\">'/'</span>)<br>    .expect(<span class=\"hljs-number\">200</span>, done);",
      "isRoot": false,
      "uuid": "0f6f0e31-41d5-4eed-a2ce-58f1ac2c9a9c",
      "parentUUID": "267a203d-c55d-42e6-8ffc-7a8ad98667f6",
      "skipped": false
    },
    {
      "title": "should assert the body before status",
      "fullTitle": "assert ordering by call order should assert the body before status",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \\'hey\\' response body, '</span> +<br>      <span class=\"hljs-string\">'got \\'{\"message\":\"something went wrong\"}\\''</span>);<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "959449d7-cc31-4e90-bc42-09131ad04dbc",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should assert the status before body",
      "fullTitle": "assert ordering by call order should assert the status before body",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">500</span>).json({ message: <span class=\"hljs-string\">'something went wrong'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-number\">200</span>)<br>  .expect(<span class=\"hljs-string\">'hey'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected 200 \"OK\", got 500 \"Internal Server Error\"'</span>);<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "c32b6d06-f4bf-4a97-97f0-9b1bf60c271f",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should assert the fields before body and status",
      "fullTitle": "assert ordering by call order should assert the fields before body and status",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.set(<span class=\"hljs-string\">'json spaces'</span>, <span class=\"hljs-number\">0</span>);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({ hello: <span class=\"hljs-string\">'world'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-regexp\">/html/</span>)<br>  .expect(<span class=\"hljs-string\">'hello'</span>)<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    err.message.should.equal(<span class=\"hljs-string\">'expected \"content-type\" matching /html/, '</span> +<br>      <span class=\"hljs-string\">'got \"application/json; charset=utf-8\"'</span>);<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "40f56091-ec2d-4ecc-97e5-371575451729",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call the expect function in order",
      "fullTitle": "assert ordering by call order should call the expect function in order",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    res.body.second = <span class=\"hljs-number\">2</span>;<br>  })<br>  .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    (res.body.second === <span class=\"hljs-number\">2</span>).should.be.true;<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "f54892bd-2246-491d-a98a-37a745e1b07a",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call expect(fn) and expect(status, fn) in order",
      "fullTitle": "assert ordering by call order should call expect(fn) and expect(status, fn) in order",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).json({});<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.first = <span class=\"hljs-number\">1</span>;<br>  })<br>  .expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>    (err === <span class=\"hljs-literal\">null</span>).should.be.true;<br>    (res.body.first === <span class=\"hljs-number\">1</span>).should.be.true;<br>    done();<br>  });",
      "isRoot": false,
      "uuid": "3c0e37dd-884b-4a7c-9d74-823bbda33852",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call expect(fn) and expect(header,value) in order",
      "fullTitle": "assert ordering by call order should call expect(fn) and expect(header,value) in order",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res<br>    .set(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>    .send();<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">'Some value'</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.headers[<span class=\"hljs-string\">'x-some-header'</span>] = <span class=\"hljs-string\">''</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'X-Some-Header'</span>, <span class=\"hljs-string\">''</span>)<br>  .end(done);",
      "isRoot": false,
      "uuid": "47715a29-3677-4606-a8a9-1743ff03ffd9",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "should call expect(fn) and expect(body) in order",
      "fullTitle": "assert ordering by call order should call expect(fn) and expect(body) in order",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.json({ somebody: <span class=\"hljs-string\">'some body value'</span> });<br>});<br>request(app)<br>  .get(<span class=\"hljs-string\">'/'</span>)<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.body.somebody = <span class=\"hljs-string\">'nobody'</span>;<br>  })<br>  .expect(<span class=\"hljs-regexp\">/some body value/</span>)  <span class=\"hljs-comment\">// res.text should not be modified.</span><br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })<br>  .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{<br>    res.text = <span class=\"hljs-string\">'gone'</span>;<br>  })<br>  .expect(<span class=\"hljs-string\">'gone'</span>)<br>  .expect(<span class=\"hljs-regexp\">/gone/</span>)<br>  .expect({ somebody: <span class=\"hljs-string\">'nobody'</span> })  <span class=\"hljs-comment\">// res.body should not be modified</span><br>  .expect(<span class=\"hljs-string\">'gone'</span>, done);",
      "isRoot": false,
      "uuid": "39029a9e-2078-4563-9ca2-be2587dcc022",
      "parentUUID": "5cc3eb2f-0adc-4d47-b76a-2b0f7145c9e5",
      "skipped": false
    },
    {
      "title": "normal single query string value works",
      "fullTitle": "request.get(url).query(vals) works as expected normal single query string value works",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: <span class=\"hljs-string\">'Test1'</span> })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "9ba7939b-8882-4d74-b13e-61aa3bd0e666",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    },
    {
      "title": "array query string value works",
      "fullTitle": "request.get(url).query(vals) works as expected array query string value works",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>, <span class=\"hljs-string\">'Test2'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1&amp;val%5B%5D=Test2'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "09346724-22f7-4450-85ce-001dd698067d",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    },
    {
      "title": "array query string value work even with single value",
      "fullTitle": "request.get(url).query(vals) works as expected array query string value work even with single value",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(<span class=\"hljs-built_in\">Array</span>.isArray(req.query.val));<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ <span class=\"hljs-string\">'val[]'</span>: [<span class=\"hljs-string\">'Test1'</span>] })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.req.path.should.be.equal(<span class=\"hljs-string\">'/?val%5B%5D=Test1'</span>);<br>  res.text.should.be.equal(<span class=\"hljs-string\">'true'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "af17615e-daae-41aa-a617-dd188c8c6272",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    },
    {
      "title": "object query string value works",
      "fullTitle": "request.get(url).query(vals) works as expected object query string value works",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.status(<span class=\"hljs-number\">200</span>).send(req.query.val.test);<br>});<br>request(app)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.query({ val: { test: <span class=\"hljs-string\">'Test1'</span> } })<br>.expect(<span class=\"hljs-number\">200</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  res.text.should.be.equal(<span class=\"hljs-string\">'Test1'</span>);<br>  done();<br>});",
      "isRoot": false,
      "uuid": "71c9fe0e-3225-4f09-9e35-74154c633e56",
      "parentUUID": "016a05f7-4e05-4533-909f-efe652fc039e",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should work with a https server",
      "fullTitle": "request(app) should work with a https server",
      "timedOut": false,
      "duration": 2,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> app = express();<br><span class=\"hljs-keyword\">var</span> fixtures = path.join(__dirname, <span class=\"hljs-string\">'fixtures'</span>);<br><span class=\"hljs-keyword\">var</span> server = https.createServer({<br>  key: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_key.pem'</span>)),<br>  cert: fs.readFileSync(path.join(fixtures, <span class=\"hljs-string\">'test_cert.pem'</span>))<br>}, app);<br>app.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{<br>  res.send(<span class=\"hljs-string\">'hey'</span>);<br>});<br>request(server)<br>.get(<span class=\"hljs-string\">'/'</span>)<br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{<br>  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>  res.status.should.equal(<span class=\"hljs-number\">200</span>);<br>  res.text.should.equal(<span class=\"hljs-string\">'hey'</span>);<br>  done();<br>});",
      "err": {
        "name": "Error",
        "message": "ENOENT: no such file or directory, open 'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'",
        "stack": "<span class=\"hljs-built_in\">Error</span>: ENOENT: no such file or directory, open <span class=\"hljs-string\">'E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\module\\fixtures\\test_key.pem'</span><br>  at <span class=\"hljs-built_in\">Error</span> (native)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.openSync (fs.js:<span class=\"hljs-number\">549</span>:<span class=\"hljs-number\">18</span>)<br>  at <span class=\"hljs-built_in\">Object</span>.fs.readFileSync (fs.js:<span class=\"hljs-number\">397</span>:<span class=\"hljs-number\">15</span>)<br>  at Context.&lt;anonymous&gt; (E:\\gogsrepo\\MakeBlock_Web_APITest\\test\\<span class=\"hljs-built_in\">module</span>\\supertest.js:<span class=\"hljs-number\">108</span>:<span class=\"hljs-number\">15</span>)<br>  at callFnAsync (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">349</span>:<span class=\"hljs-number\">8</span>)<br>  at Test.Runnable.run (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runnable.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">7</span>)<br>  at Runner.runTest (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">422</span>:<span class=\"hljs-number\">10</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">528</span>:<span class=\"hljs-number\">12</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">342</span>:<span class=\"hljs-number\">14</span>)<br>  at E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">352</span>:<span class=\"hljs-number\">7</span><br>  at next (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">284</span>:<span class=\"hljs-number\">14</span>)<br>  at Immediate._onImmediate (E:\\gogsrepo\\MakeBlock_Web_APITest\\node_modules\\mocha\\lib\\runner.js:<span class=\"hljs-number\">320</span>:<span class=\"hljs-number\">5</span>)<br>"
      },
      "isRoot": false,
      "uuid": "222c42a4-3b53-4951-b067-f20e0e75fe01",
      "parentUUID": "44402c40-fc47-42be-8da3-d892a1810e40",
      "skipped": false
    }
  ],
  "copyrightYear": 2016
}